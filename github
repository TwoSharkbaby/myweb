깃과 깃허브를 사용하는 이유 / 버전관리를 해야하는 이유
Git은 프로젝트 폴더 작업을 기록하고 버전관리를 통해 변경사항을 추적 할 수있으며 공동프로젝트에서 작업을 조율하는데 유리함
깃허브는 깃을 사용하는 프로젝트를 지원한느 웹호스팅 서비스이며 언제 어디서나 접근 가능함
버전관리를 통해서 파일 변화를 시간에 따라 기록하고 필요하면 특정 시점의 버전을 꺼내서 롤백하거나 수정내용을 비교하거나
누가문제를 읽으키고 언제문제가 생겼는지 등의 협업하면서 생길수있는 문제점들을 보완

깃을 이용하여 깃허브에 공유하는 방법
1. 깃을 사용하여 관리자명과 이메일을 설정하고 지역저장소와 광역 저장소를 만듬
2. 지역저장소에 원격저장소(깃허브)에 연결하고 프로젝트를 add / commit을 하고 push하여 업로드함
3. 원격저장소에서 지역저장소로 데이터를 불러들일때는 push를 이용
4. 브런치을 이용하여 가지를 나눌수있고 테그를 통하여 특정시점을 메모 관리 저장 할수있음
5. 깃플로우를 사용하여 소프트웨어 버전관리가 필요한 앱들을 관리 할수도있음

이클립스 및 스프링툴로 깃허브에 공유
1. 뷰에 Git Repositories를 새로운 폴더생성을 하고 깃허브에 새로운 저장소를 만들어 링크주소를 넣어 연결
2. 깃허브에 저장하고 싶은 프로젝트의 오른쪽 클릭하여 Team을 클릭하고 Commit을 누름
3. 커밋할 프로젝트를 Staged Changes에 놓고 Commit and Push를 함
4. Team을 누르고 pull을 눌러서 데이터를 가져올수도 있음

깃허브 호스팅 서비스
1. 깃허브에 로그인 한뒤 왼쪽 상단의 Repositories NEW를 클릭한다
2. Repository name을 본인닉네임.github.io 형식으로 만들고 Public으로 정한다
3. Git bash를 거치지 않고 간편하게 만들기 위해 Add a README file을 체크하고 Create repository를 누른다
4. 주소창에 본인닉네임.github.io 를 입력하면 웹페이지가 만들어진것을 확인 할수 있다
5. README 파일을 삭제하고 .nojekyll 의 이름을 가진 빈 파일을 만든다
6. index.html 파일을 만들어 하나의 웹페이즈만 꾸밀수 있다
7. 기초적인 웹페이지 기능(css/js) 등만 구현이 되며 데이터베이스와 같은 기능은 구현할수 없다
